"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addVulnerability = addVulnerability;
exports.getVulnerability = getVulnerability;
exports.listVulnerabilities = listVulnerabilities;
exports.updateVulnerability = updateVulnerability;
exports.deleteVulnerability = deleteVulnerability;
exports.listPentesters = listPentesters;
const client_1 = require("@prisma/client");
const grpc = __importStar(require("@grpc/grpc-js"));
const prisma = new client_1.PrismaClient();
async function addVulnerability(call, callback) {
    try {
        const newVulnerability = await prisma.vulnerability.create({
            data: {
                type: call.request.type || "",
                company: call.request.company || "",
                pentester: call.request.pentester || "",
            },
        });
        callback(null, {
            id: newVulnerability.id.toString(),
            type: newVulnerability.type,
            company: newVulnerability.company,
            pentester: newVulnerability.pentester,
        });
    }
    catch (error) {
        callback({
            code: grpc.status.INTERNAL,
            message: "Internal server error",
        });
    }
}
async function getVulnerability(call, callback) {
    try {
        if (!call.request.id) {
            callback({
                code: grpc.status.INVALID_ARGUMENT,
                message: "ID is required",
            });
            return;
        }
        const vulnerability = await prisma.vulnerability.findUnique({
            where: { id: parseInt(call.request.id, 10) },
        });
        if (vulnerability) {
            callback(null, {
                id: vulnerability.id.toString(),
                type: vulnerability.type,
                company: vulnerability.company,
                pentester: vulnerability.pentester,
            });
        }
        else {
            callback({
                code: grpc.status.NOT_FOUND,
                message: "Vulnerability not found",
            });
        }
    }
    catch (error) {
        callback({
            code: grpc.status.INTERNAL,
            message: "Internal server error",
        });
    }
}
async function listVulnerabilities(call) {
    try {
        const allVulnerabilities = await prisma.vulnerability.findMany();
        allVulnerabilities.forEach((vulnerability) => call.write({
            id: vulnerability.id.toString(),
            type: vulnerability.type,
            company: vulnerability.company,
            pentester: vulnerability.pentester,
        }));
        call.end();
    }
    catch (error) {
        call.destroy(error);
    }
}
async function updateVulnerability(call, callback) {
    try {
        if (!call.request.id) {
            callback({
                code: grpc.status.INVALID_ARGUMENT,
                message: "ID is required",
            });
            return;
        }
        const updatedVulnerability = await prisma.vulnerability.update({
            where: { id: parseInt(call.request.id, 10) },
            data: {
                type: call.request.type || "",
                company: call.request.company || "",
                pentester: call.request.pentester || "",
            },
        });
        callback(null, {
            id: updatedVulnerability.id.toString(),
            type: updatedVulnerability.type,
            company: updatedVulnerability.company,
            pentester: updatedVulnerability.pentester,
        });
    }
    catch (error) {
        callback({
            code: grpc.status.NOT_FOUND,
            message: "Vulnerability not found",
        });
    }
}
async function deleteVulnerability(call, callback) {
    try {
        if (!call.request.id) {
            callback({
                code: grpc.status.INVALID_ARGUMENT,
                message: "ID is required",
            });
            return;
        }
        await prisma.vulnerability.delete({
            where: { id: parseInt(call.request.id, 10) },
        });
        callback(null, {});
    }
    catch (error) {
        callback({
            code: grpc.status.NOT_FOUND,
            message: "Vulnerability not found",
        });
    }
}
async function listPentesters(call) {
    try {
        const allPentesters = await prisma.pentester.findMany();
        allPentesters.forEach((pentester) => call.write({
            id: pentester.id.toString(),
            name: pentester.name,
        }));
        call.end();
    }
    catch (error) {
        call.destroy(error);
    }
}
